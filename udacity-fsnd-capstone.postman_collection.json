{
	"info": {
		"_postman_id": "9eb42063-f6c1-471f-8d5e-ef49b6ea8a9d",
		"name": "udacity-fsnd-capstone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Executive Producer",
			"item": [
				{
					"name": "Movies",
					"item": [
						{
							"name": "get-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.movie_data).to.be.an('object');\r",
											"    pm.expect(jsonData.movie_data.id).to.be.a('number');\r",
											"    pm.expect(jsonData.movie_data.name).to.be.a('string');\r",
											"    pm.expect(jsonData.movie_data.release_date).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/movies/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "search-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains valid array of movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.movie_data).to.be.an('object');\r",
											"    const count = jsonData.movie_data.count;\r",
											"    pm.expect(count).to.be.a('number');\r",
											"    pm.expect(jsonData.movie_data.data).to.be.an('array');\r",
											"    pm.expect(jsonData.movie_data.data.length).to.be.greaterThan(0);\r",
											"    for (const movie of jsonData.movie_data.data) {\r",
											"        pm.expect(movie.id).to.be.a('number')\r",
											"        pm.expect(movie.name).to.be.a('string')\r",
											"        pm.expect(movie.release_date).to.be.a('string')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"search_term\": \"Movie for Viewing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "post-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains correct ID\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.be.a('number');\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Newly created movie\",\r\n    \"release_date\": \"2022-01-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Edited movie\",\r\n    \"release_date\": \"2022-01-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/3",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Actors",
					"item": [
						{
							"name": "get-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actor_data).to.be.an('object');\r",
											"    pm.expect(jsonData.actor_data.id).to.be.a('number');\r",
											"    pm.expect(jsonData.actor_data.name).to.be.a('string');\r",
											"    pm.expect(jsonData.actor_data.age).to.be.a('number');\r",
											"    pm.expect(jsonData.actor_data.gender).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/actors/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "search-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains valid array of movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actor_data).to.be.an('object');\r",
											"    const count = jsonData.actor_data.count;\r",
											"    pm.expect(count).to.be.a('number');\r",
											"    pm.expect(jsonData.actor_data.data).to.be.an('array');\r",
											"    pm.expect(jsonData.actor_data.data.length).to.be.greaterThan(0);\r",
											"    for (const actor of jsonData.actor_data.data) {\r",
											"        pm.expect(actor.id).to.be.a('number')\r",
											"        pm.expect(actor.name).to.be.a('string')\r",
											"        pm.expect(actor.age).to.be.a('number')\r",
											"        pm.expect(actor.gender).to.be.a('string')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"search_term\": \"Actor for Viewing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "post-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains correct ID\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.be.a('number');\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Newly created actor\",\r\n    \"age\": 26,\r\n    \"gender\": \"gender\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Edited actor\",\r\n    \"age\": 26,\r\n    \"gender\": \"gender\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/3",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"3"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikt6RjN1NDhkcGhfYkpEc0RBaVA0diJ9.eyJpc3MiOiJodHRwczovL2ZzbmQtZGpoLmF1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MGQwMGE1YWVlZmRiNTAwNzY3ZDk2ZmYiLCJhdWQiOiJjYXBzdG9uZSIsImlhdCI6MTYyNDM1ODMwNSwiZXhwIjoxNjI0NDQ0NzA1LCJhenAiOiJSWFNrTWF2OVFEQ2ZDeGFtRjZ0clZya20wY0tKUG9aYSIsInNjb3BlIjoiIiwicGVybWlzc2lvbnMiOlsiZGVsZXRlOmFjdG9ycyIsImRlbGV0ZTptb3ZpZXMiLCJnZXQ6YWN0b3JzIiwiZ2V0Om1vdmllcyIsInBhdGNoOmFjdG9ycyIsInBhdGNoOm1vdmllcyIsInBvc3Q6YWN0b3JzIiwicG9zdDptb3ZpZXMiXX0.iPhrQ27R2tNBzYJxT7PF1Ee85D_3fYS58_SCJ8OzpYPphH0chbESjs-htIMjXvrqVsAFew7pEw4BBfVfRN4tx3pmwO274maiEbiZdu1Cb0W3wq0PJH6ZS2s5Py7fopPDaKAX2TalJjKpzFxsJSiZkJYLjtsUi206F7L_9Q1TIj-XiaL8au79b5Y0fAxLU2ydyOGTDoiilRN70G2Y3nFQCjUZ4kwmGe6npBx4bnG9K9Vqbapn64d038gmX9v18InK9u24LOhWrpIisTav42E9TNhSKCoRYdyW1_gMdepCPgUY24dQ5lSLn9iniYqSzHWI-sIXYbrPGUqwu8-yGnWCTQ",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Casting Director",
			"item": [
				{
					"name": "Movies",
					"item": [
						{
							"name": "get-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.movie_data).to.be.an('object');\r",
											"    pm.expect(jsonData.movie_data.id).to.be.a('number');\r",
											"    pm.expect(jsonData.movie_data.name).to.be.a('string');\r",
											"    pm.expect(jsonData.movie_data.release_date).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/movies/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "search-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains valid array of movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.movie_data).to.be.an('object');\r",
											"    const count = jsonData.movie_data.count;\r",
											"    pm.expect(count).to.be.a('number');\r",
											"    pm.expect(jsonData.movie_data.data).to.be.an('array');\r",
											"    pm.expect(jsonData.movie_data.data.length).to.be.greaterThan(0);\r",
											"    for (const movie of jsonData.movie_data.data) {\r",
											"        pm.expect(movie.id).to.be.a('number')\r",
											"        pm.expect(movie.name).to.be.a('string')\r",
											"        pm.expect(movie.release_date).to.be.a('string')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"search_term\": \"Movie for Viewing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "post-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Newly created movie\",\r\n    \"release_date\": \"2022-01-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Edited movie\",\r\n    \"release_date\": \"2022-01-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/3",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Actors",
					"item": [
						{
							"name": "get-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actor_data).to.be.an('object');\r",
											"    pm.expect(jsonData.actor_data.id).to.be.a('number');\r",
											"    pm.expect(jsonData.actor_data.name).to.be.a('string');\r",
											"    pm.expect(jsonData.actor_data.age).to.be.a('number');\r",
											"    pm.expect(jsonData.actor_data.gender).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/actors/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "search-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains valid array of movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actor_data).to.be.an('object');\r",
											"    const count = jsonData.actor_data.count;\r",
											"    pm.expect(count).to.be.a('number');\r",
											"    pm.expect(jsonData.actor_data.data).to.be.an('array');\r",
											"    pm.expect(jsonData.actor_data.data.length).to.be.greaterThan(0);\r",
											"    for (const actor of jsonData.actor_data.data) {\r",
											"        pm.expect(actor.id).to.be.a('number')\r",
											"        pm.expect(actor.name).to.be.a('string')\r",
											"        pm.expect(actor.age).to.be.a('number')\r",
											"        pm.expect(actor.gender).to.be.a('string')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"search_term\": \"Actor for Viewing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "post-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains correct ID\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.be.a('number');\r",
											"    pm.expect(jsonData.id).to.be.greaterThan(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Newly created actor\",\r\n    \"age\": 26,\r\n    \"gender\": \"gender\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Edited actor\",\r\n    \"age\": 26,\r\n    \"gender\": \"gender\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/4",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"4"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikt6RjN1NDhkcGhfYkpEc0RBaVA0diJ9.eyJpc3MiOiJodHRwczovL2ZzbmQtZGpoLmF1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MGQwNDdmZDE3NWEwZjAwNzE2MmFkZDIiLCJhdWQiOiJjYXBzdG9uZSIsImlhdCI6MTYyNDM1ODQzOSwiZXhwIjoxNjI0NDQ0ODM5LCJhenAiOiJSWFNrTWF2OVFEQ2ZDeGFtRjZ0clZya20wY0tKUG9aYSIsInNjb3BlIjoiIiwicGVybWlzc2lvbnMiOlsiZGVsZXRlOmFjdG9ycyIsImdldDphY3RvcnMiLCJnZXQ6bW92aWVzIiwicGF0Y2g6YWN0b3JzIiwicGF0Y2g6bW92aWVzIiwicG9zdDphY3RvcnMiXX0.aoBLvMPWng0Sv6Ba8VovPTAsdWzYOHFzScK6u3CfePk1Ur26Dcm7sMmB_BHtKC442Xzow07DjKpdi0YGh2h3oQ1MV2ldu4oMtioQ8UjEqa_kE-JACkuPmh4i_LJEzDxP4tHOPnqClPt6EY9FcTre7c7vqYev0Qp0G4HORvvzlqFgxxfmKZVwIUBbNze01D3I6gmhvjKTZuo6Y9c00j0k8NvV-vSHLiXtXKudZ1WZBpJU3U96IsDhUaffxEhnRaKpgKvK68Icgl8XH6tovwMyu3mUR333OtZmv-xpD5NeE7J1KUF1lt7VAPcRbaU1UA22_rRt6tpcMrFM_6B022MBcQ",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Casting Assistant",
			"item": [
				{
					"name": "Movies",
					"item": [
						{
							"name": "get-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.movie_data).to.be.an('object');\r",
											"    pm.expect(jsonData.movie_data.id).to.be.a('number');\r",
											"    pm.expect(jsonData.movie_data.name).to.be.a('string');\r",
											"    pm.expect(jsonData.movie_data.release_date).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/movies/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "search-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains valid array of movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.movie_data).to.be.an('object');\r",
											"    const count = jsonData.movie_data.count;\r",
											"    pm.expect(count).to.be.a('number');\r",
											"    pm.expect(jsonData.movie_data.data).to.be.an('array');\r",
											"    pm.expect(jsonData.movie_data.data.length).to.be.greaterThan(0);\r",
											"    for (const movie of jsonData.movie_data.data) {\r",
											"        pm.expect(movie.id).to.be.a('number')\r",
											"        pm.expect(movie.name).to.be.a('string')\r",
											"        pm.expect(movie.release_date).to.be.a('string')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"search_term\": \"Movie for Viewing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "post-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Newly created movie\",\r\n    \"release_date\": \"2022-01-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Edited movie\",\r\n    \"release_date\": \"2022-01-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/3",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Actors",
					"item": [
						{
							"name": "get-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actor_data).to.be.an('object');\r",
											"    pm.expect(jsonData.actor_data.id).to.be.a('number');\r",
											"    pm.expect(jsonData.actor_data.name).to.be.a('string');\r",
											"    pm.expect(jsonData.actor_data.age).to.be.a('number');\r",
											"    pm.expect(jsonData.actor_data.gender).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/actors/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "search-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"value contains valid array of movie data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actor_data).to.be.an('object');\r",
											"    const count = jsonData.actor_data.count;\r",
											"    pm.expect(count).to.be.a('number');\r",
											"    pm.expect(jsonData.actor_data.data).to.be.an('array');\r",
											"    pm.expect(jsonData.actor_data.data.length).to.be.greaterThan(0);\r",
											"    for (const actor of jsonData.actor_data.data) {\r",
											"        pm.expect(actor.id).to.be.a('number')\r",
											"        pm.expect(actor.name).to.be.a('string')\r",
											"        pm.expect(actor.age).to.be.a('number')\r",
											"        pm.expect(actor.gender).to.be.a('string')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"search_term\": \"Actor for Viewing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "post-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Newly created actor\",\r\n    \"age\": 26,\r\n    \"gender\": \"gender\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Edited actor\",\r\n    \"age\": 26,\r\n    \"gender\": \"gender\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ikt6RjN1NDhkcGhfYkpEc0RBaVA0diJ9.eyJpc3MiOiJodHRwczovL2ZzbmQtZGpoLmF1LmF1dGgwLmNvbS8iLCJzdWIiOiJhdXRoMHw2MGNmMDIzMjE3NWEwZjAwNzE2Mjk3ZTMiLCJhdWQiOiJjYXBzdG9uZSIsImlhdCI6MTYyNDM1ODUyNiwiZXhwIjoxNjI0NDQ0OTI2LCJhenAiOiJSWFNrTWF2OVFEQ2ZDeGFtRjZ0clZya20wY0tKUG9aYSIsInNjb3BlIjoiIiwicGVybWlzc2lvbnMiOlsiZ2V0OmFjdG9ycyIsImdldDptb3ZpZXMiXX0.MtSYebvf2h3W8OEwfKTegqKCfn_54yeO99fGH0Qzn5BNve1X7-hQd0gZof1_xn52lJEc5-jS83wsuLoJCK0oNuYMoHCgWW4qagd7clykxKG8HoPSNEvM-kMhvNmF6OfNDL2ZtYRa8BEY71aLHlL-HGY5fLad6CGfDpREkd3tlduljJZTjoYdqQZVYMp_LKtbcvWDnEbQ-slig2tL_zSIsZU0qHpjGBPi6KrOgwxw3xdlPgXYjIQ-BMSnNo-hHSRPqUstAub5Hn9NW0Pl6XRVfo_NXqtgL75Ptl4CD5C4kRQPN9Co_XgJH17Orks8RAx30tFau30cpaQvkrqG3iEbCA",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Public",
			"item": [
				{
					"name": "Movies",
					"item": [
						{
							"name": "get-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/movies/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "search-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"search_term\": \"Movie for Viewing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "post-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Newly created movie\",\r\n    \"release_date\": \"2022-01-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Edited movie\",\r\n    \"release_date\": \"2022-01-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-movie",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/movies/3",
									"host": [
										"{{host}}"
									],
									"path": [
										"movies",
										"3"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Actors",
					"item": [
						{
							"name": "get-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/actors/1",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "search-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"search_term\": \"Actor for Viewing\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/search",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "post-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Newly created actor\",\r\n    \"age\": 26,\r\n    \"gender\": \"gender\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Edited actor\",\r\n    \"age\": 26,\r\n    \"gender\": \"gender\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/2",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-actor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{host}}/actors/3",
									"host": [
										"{{host}}"
									],
									"path": [
										"actors",
										"3"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost:5000"
		}
	]
}